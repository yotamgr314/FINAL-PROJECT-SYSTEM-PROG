TCP SOCKET SERVER SHORT BLUEPRINTS: 
1) Declate Address Structures for client and server.
2) Create the TCP Socket().
3) Zero out Server Address Structure. then Initialize its values.
4) Bind() the Socket to the Server Address struct.
5) listen() for Incoming Connections
6) create a whileForever loop -  inside it call accept().
7) use fork() to Handle the Client Request.
8) close() serverSocket in the child process. 
9) recv() to receive the client message body in the buffer variable. 
10) handle the request and send() a response to the client. and after that close(cleintSocket) and exit(0);


TCP SERVER SOCKET DETAILED STEPS:
1) declare two sockaddr_in addresses structs, one for the client, the other for the TCP server. (servaddr, and cliaddr).
2) create the server TCP socket--> call int serverSocketMesharetDescriptor= socket(AF_INET value, SOCK_STREAM) - SOCK_STREAM indicates its a TCP socket. 
3) Use memset(&servaddr, 0, sizeof(servaddr)); to zero out the servaddr struct.
4) intilized the server struct values: servaddr.sin_family = AF_INET, servaddr.sin_addr.s_addr = INADDR_ANY,servaddr.sin_port = htons(PORT);
5) Call bind() to attach the socket to the initialized server address struct.
6) call the listen(serverSocketMesharetDescriptor,5) func with the socket descriptor, and the maximum amount of connections waiting to be accept that the server will handle. 
7) create a whileForever loop, in its body make an clientsocketDescriptor = accept(serverSocketMesharetDescriptor,(struct sockaddr *)&cliaddr, &len) which blocks execution until client connects.
    a) if clientsocketDescriptor<0 skip the next whileForever iteration.
9) if we are here it means that a connection has been established, via the accept API call, and clientsocketDescriptor holds the newly connected client's socket descriptor.
    1) hence we will Use fork() to create a new child process to handle the client request, inside the child process:
    2) close(serverSocketMesharetDescriptor) becuse the child does not need to listen to the socket_aMeshearet, his father already doing it. 
    3) receive data from the client using - int clientMessRes = recv(clientsocketDescriptor, inputBuffer, buffSize, 0) - and recivie the client request body in buffer, and handle the request according to the question demands.. 
    4) send a response back to the client from the server by wirting the answer into the buffer and sending the buffer via the send(clientsocketDescriptor, buffer, terminator of the buffer, 0)
    5) close the client tcp socket connection, via close(clientsocketDescriptor), and exit(0); to terminate the child process that was create to handle this request. 



UDP SOCKET SERVER SHORT BLUEPRINTS:
1) Declare Address Structures for client and server.
2) Create the UDP Socket().
3) Zero out Server Address Structure. then Initialize its values.
4) Bind() the Socket to the Server Address struct.
5) create a whileForever loop - inside it call recvfrom().
6) Fork() a Child Process to Handle the client request.
7) sendto() - to send the buffer containing the response back to the client.
8) close(socketMesharet), and exit(0), and continue to the next iteration, outside of the loop close(socketMesharet), and return 0;


UDP SOCKET SERVER DETAILED STEPS:
1) declare two sockaddr_in addresses structs, one for the client, the other for the UDP server. (servaddr, and cliaddr).
2) create the server UDP socket--> call int serverSocketMesharetDescriptor= socket(AF_INET value, SOCK__DGRAM) - SOCK_DGRAM indicates its a UDP socket. 
3) Use memset(&servaddr, 0, sizeof(servaddr)); to zero out the servaddr struct.
4) intilized the server struct values: servaddr.sin_family = AF_INET, servaddr.sin_addr.s_addr = INADDR_ANY,servaddr.sin_port = htons(PORT);
5) Call bind() to attach the socket to the initialized server address struct.
7) create a whileForever loop, in its body - int clientMessRes = recvfrom(serverSocketMesharetDescriptor, buffer, BUFSIZE, MSG_WAITALL, (struct sockaddr *)&cliaddr, &len);
8) buffer[clientMessRes] = '\0'
    1) we will Use fork() to create a new child process to handle the client request, inside the child process:
    2) send a response back to the client from the server by wirting the answer into the buffer and sending the buffer via the sendto(serverSocketMesharetDescriptor, buffer, n, MSG_CONFIRM, (const struct sockaddr *)&cliaddr, len);
    3) close(serverSocketMesharetDescriptor), exit(0) and the whileForever loop continutes...
    4) outside the whileForeverLoop close(serverSocketMesharetDescriptor); and return 0;
